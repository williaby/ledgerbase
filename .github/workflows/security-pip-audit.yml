name: Security - pip-audit & license check

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  pip-audit:
    name: pip-audit + license check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install audit tools
        run: |
          pip install pip-audit pip-licenses
          pip install -r requirements.txt

      - name: Run pip-audit (SARIF)
        id: audit
        run: |
          pip-audit --format sarif -o pip-audit.sarif || true
          count=$(jq '[.runs[].results[]] | length' pip-audit.sarif)
          echo "results=$count" >> $GITHUB_OUTPUT

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: pip-audit.sarif

      - name: Upload full audit report
        if: steps.audit.outputs.results != '0'
        uses: actions/upload-artifact@v3
        with:
          name: pip-audit-report
          path: pip-audit.sarif

      - name: Comment PR with pip-audit summary
        if: github.event_name == 'pull_request' && steps.audit.outputs.results != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const sarif = require('./pip-audit.sarif');
            const results = sarif.runs?.[0]?.results || [];
            const top = results.slice(0, 5).map(r => {
              const msg = r.message?.text || 'Unknown';
              const pkg = r.locations?.[0]?.physicalLocation?.artifactLocation?.uri || 'Unknown';
              return `- **Package**: \`${pkg}\`\n  **Issue**: ${msg}`;
            }).join('\n\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `### pip-audit findings\n\n${top}\n\nPlease address these before merging.`,
            });

      - name: Add labels
        if: github.event_name == 'pull_request' && steps.audit.outputs.results != '0'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['security:pip-audit', 'needs:dependency-review'],
            });

      - name: Remove labels if clean
        if: github.event_name == 'pull_request' && steps.audit.outputs.results == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const labelsToRemove = ['security:pip-audit', 'needs:dependency-review'];
            const issueLabels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });

            for (const label of issueLabels.data) {
              if (labelsToRemove.includes(label.name)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: label.name,
                });
              }
            }

      - name: Fail job if high/critical vulnerabilities are found
        if: steps.audit.outputs.results != '0'
        run: |
          high=$(jq '[.runs[].results[] | select(.level == "error" or .level == "warning")] | length' pip-audit.sarif)
          if [ "$high" -gt 0 ]; then
            echo "‚ùå High/critical issues found."
            exit 1
          fi

      - name: License compliance check
        run: |
          pip-licenses --format=markdown --with-urls --output-file=LICENSE_REPORT.md
          cat LICENSE_REPORT.md
