name: Security - Dependency Audit (Safety)

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 4 * * 1'  # Every Monday
  workflow_dispatch:

jobs:
  safety-audit:
    name: Python Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pip-tools and safety
        run: |
          pip install pip-tools safety
          pip-compile requirements.in

      - name: Run Safety audit
        id: safety
        run: |
          safety check -r requirements.txt --json > safety-results.json || true
          echo "results=$(jq length safety-results.json)" >> $GITHUB_OUTPUT

      - name: Upload results
        if: steps.safety.outputs.results != '0'
        uses: actions/upload-artifact@v3
        with:
          name: safety-audit
          path: safety-results.json

      - name: Label PR if vulnerabilities found
        if: github.event_name == 'pull_request' && steps.safety.outputs.results != '0'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['security:safety', 'needs:dependency-review'],
            });

      - name: Comment PR with safety summary
        if: github.event_name == 'pull_request' && steps.safety.outputs.results != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('safety-results.json', 'utf8'));
            const comment = results.slice(0, 5).map(vuln =>
              `- **Package**: \`${vuln.package_name}\`\n  **Severity**: ${vuln.severity}\n  **Advisory**: ${vuln.advisory}`
            ).join('\n\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `### Safety Dependency Audit Findings\n\n${comment}\n\nPlease address or approve these advisories before merging.`,
            });

      - name: Remove labels if clean
        if: github.event_name == 'pull_request' && steps.safety.outputs.results == '0'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const labelsToRemove = ['security:safety', 'needs:dependency-review'];
            const issueLabels = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });

            for (const label of issueLabels.data) {
              if (labelsToRemove.includes(label.name)) {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: label.name,
                });
              }
            }

      - name: Fail PR if high or critical CVEs are found
        if: steps.safety.outputs.results != '0'
        run: |
          high=$(jq '[.[] | select(.severity == "high" or .severity == "critical")] | length' safety-results.json)
          echo "High/critical vulnerabilities found: $high"
          if [ "$high" -gt 0 ]; then
            echo "‚ùå High severity vulnerabilities detected. Failing job."
            exit 1
          fi
