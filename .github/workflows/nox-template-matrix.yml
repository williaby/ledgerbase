name: Nox Matrix Test

# This is a reusable matrix workflow for running named Nox sessions.

on:
  workflow_call:
    inputs:
      session:
        required: true
        type: string
      python-version:
        required: false
        type: string
        default: "3.11"

jobs:
  nox-matrix:
    name: Run ${{ inputs.session }} on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ${{ fromJson(inputs.python-version) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.0

      - name: Load Python versions from config (if not overridden)
        if: inputs.python-version == '3.11'
        id: load-versions
        run: |
          VERSIONS=$(jq -c .python_versions .github/workflows/templates/python-versions.json)
          echo "matrix=${VERSIONS}" >> $GITHUB_OUTPUT

      - name: Set dynamic matrix if default is used
        if: inputs.python-version == '3.11'
        uses: actions/github-script@v7
        with:
          script: |
            const matrix = process.env.matrix;
            core.setOutput('python-version', matrix);

      - name: Set up Python
        uses: actions/setup-python@v4.8.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry + pip + .nox
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
            .nox
          key: ${{ runner.os }}-nox-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-nox-${{ matrix.python-version }}-

      - name: Install Nox
        run: python -m pip install --upgrade nox

      - name: Run Nox session

        run: nox -s ${{ inputs.session }}
