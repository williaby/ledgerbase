name: SBOM Generation

on:
    push:
        branches: [ main ]
        paths:
            - 'pyproject.toml'
            - 'Dockerfile'
    pull_request:
        branches: [ main ]
        paths:
            - 'pyproject.toml'
            - 'Dockerfile'
    schedule:
        -   cron: '0 2 * * *'
    workflow_dispatch:

jobs:
    generate-sbom:
        name: Generate SBOM - ${{ matrix.target }}
        runs-on: ubuntu-latest
        strategy:
            matrix:
                target: [ python, docker ]

        steps:
            -   name: Checkout code
                uses: actions/checkout@v4

            -   name: Set up Python
                if: matrix.target == 'python'
                uses: actions/setup-python@v5
                with:
                    python-version: '3.11'

            -   name: Install pip-tools and generate requirements (Python)
                if: matrix.target == 'python'
                run: |
                    pip install pip-tools
                    pip-compile pyproject.toml
                    pip-compile pyproject.toml --extra dev -o dev-requirements.txt

            -   name: Generate SBOM for production dependencies (Python)
                if: matrix.target == 'python'
                uses: CycloneDX/gh-py-cyclonedx@v3
                with:
                    input: ./requirements.txt
                    format: json
                    output: sbom-prod.json

            -   name: Generate SBOM for development dependencies (Python)
                if: matrix.target == 'python'
                uses: CycloneDX/gh-py-cyclonedx@v3
                with:
                    input: ./dev-requirements.txt
                    format: json
                    output: sbom-dev.json

            -   name: Install pip-licenses and dependencies (Python)
                if: matrix.target == 'python'
                run: |
                    pip install pip-licenses
                    pip install -r requirements.txt

            -   name: Generate SPDX SBOM (Python)
                if: matrix.target == 'python'
                run: pip-licenses --format=spdx --with-urls --output-file=SBOM.spdx.json

            -   name: Upload Python SBOMs as Artifacts
                if: matrix.target == 'python'
                uses: actions/upload-artifact@v4
                with:
                    name: python-sbom-artifacts
                    path: |
                        sbom-prod.json
                        sbom-dev.json
                        SBOM.spdx.json

            -   name: Set up Docker Buildx
                if: matrix.target == 'docker'
                uses: docker/setup-buildx-action@v3

            -   name: Build Docker image
                if: matrix.target == 'docker'
                run: docker build -t ledgerbase:latest .

            -   name: Generate CycloneDX SBOM (Docker)
                if: matrix.target == 'docker'
                run: |
                    docker run --rm \
                      -v $PWD:/project \
                      aquasec/trivy:0.49.1 \
                      image --format cyclonedx ledgerbase:latest > sbom.cdx.json

            -   name: Upload Docker CycloneDX SBOM
                if: matrix.target == 'docker'
                uses: actions/upload-artifact@v4
                with:
                    name: docker-sbom-cyclonedx
                    path: sbom.cdx.json

    label-sbom:
        name: Label SBOM-related PRs
        if: github.event_name == 'pull_request'
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write

        steps:
            -   name: Auto-label PR if SBOM-related files modified
                uses: actions/github-script@v7
                with:
                    script: |
                        const changed = await github.rest.pulls.listFiles({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          pull_number: context.payload.pull_request.number
                        });

                        const labels = [];
                        for (const file of changed.data) {
                          if (file.filename.includes("pyproject.toml")) {
                            labels.push("sbom:python");
                          }
                          if (file.filename.includes("Dockerfile")) {
                            labels.push("sbom:docker");
                          }
                        }

                        if (labels.length > 0) {
                          await github.rest.issues.addLabels({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            issue_number: context.payload.pull_request.number,
                            labels: [...new Set(labels)],
                          });
                        }
