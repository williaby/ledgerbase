---
# Front-Matter for GitHub Workflow

title: "License Compliance Workflow"
name: "license.yml"
description: "License compliance checks via Nox session and PR comments on violations"
category: security
usage: "Trigger weekly on Sundays at 02:00 UTC, on push/main, or on PR"
behavior: "Runs Nox license_report; comments on PRs via comment_violations; uploads report artifacts"
inputs: "Repository code and dependencies"
outputs: "License report artifacts and PR comments"
dependencies: "Poetry, Nox, GitHub Actions"
author: "Byron Williams"
last_modified: "2025-04-25"
changelog: "Initial migration to front-matter format"
tags: [security, compliance, license]
---

name: License Compliance

on:
  schedule:
    - cron: '0 2 * * 0'   # weekly Sunday 02:00 UTC
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  prepare:
    name: Prepare Poetry & Assured OSS
    uses: ./.github/workflows/templates/prepare-poetry.yml
    with:
      GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}
    secrets:
      GCP_SA_JSON: ${{ secrets.GCP_SA_JSON }}

  license_report:
    name: Generate & Archive License Report
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify no public PyPI fallbacks
        run: poetry run nox -s verify_assured

      - name: Run license_report session
        run: poetry run nox -s license_report

      - name: Upload license report artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: |
            docs/reports/json/license-report.json
            docs/reports/json/disallowed.txt
          retention-days: 2

  comment_violations:
    name: Comment on PR with License Violations
    needs: license_report
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify no public PyPI fallbacks
        run: poetry run nox -s verify_assured

      - name: Run comment_violations session
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: poetry run nox -s comment_violations
